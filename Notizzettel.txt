C All in One

Guten Morgen 

Peter Loos

C/C++ // C#, Java, Mobile Prog. (Android / Java)

Back-to-the-Roots: C/C++

Individual

Erwartungen // Vorraussetzungen

C: 

2 Tools:

== Unterlagen // Github

https://github.com/pelocpp/c_introduction

== Visual Studio
== Visual Studio Community 2022

======================================================

Einführung in die Arbeitsweise der Werkzeuge

Übersetzer (Compiler)

In C:

-- Übersetzer wird pro Datei angestoßen: ===> .obj (Object - File)

==> Mehrere .c-Dateien ==> mehrere .obj-Files (binäres Format)

-- Linker: Input: Mehrere .obj-Files ==> ein .exe-File (Windows: ausführbare Datei)

Namensgebung: Linux:  .o  // ausführbare Datei: keine Endung

Debugger:  Zum Testen

====================================================================

"Hello World" – das erste Programm

a) Quelltext eingeben // Fehler beseitigen // Syntax / Grammatik muss korrekt sein

b) Maschinencode erzeugen: "Build"

c) Das Programm laufen lassen:

   OHNE Debugger: Geht schneller

   MIT Debugger:  Wenn ich Fehler suche


Es werden vom Visual Studio viele Temporär-Dateien erzeugt:

.sln ==> Solution
.pdb ==> Program Database
.vs  ==> Datenbank des Projekts für VS
.vcxproj ==> Projekt Spezifischen Informationen

============================================================

Datentypen, Variablen and Konstanten

Datentyp:  

Welche Art von Wert / Daten haben wir !!!!! DATENTYP

int          => ganze Zahl
short        => ganze Zahl
long         => ganze Zahl
long long    => ganze Zahl


float:       => Komma Zahl
double:      => Komma Zahl

char         => Zeichen

Warum mehrere ?

Daten belegen Speicher.

Wieviel?   sizeof 


Wer oder was ist size_t ???

a) Ebenfalls ganzzahlig.

Was verarbeitet die CPU ???  Akku // Akkumulator => DAS zentrale Register einer CPU

size_t erfunden, um die Breite des Akkus abzubilden.

Breite des Akkus: (( 1 Byte, 2 Byte, )) 4 Byte, 8 Byte


Anzahl der Bits ==> entscheidet Wertebereich !!!

a) 8 Bits = 1 Byte:  -128 bis +127

b) 16 Bits = 2 Byte: -32,768 bis +32,767

c) 32 Bits = 4 Bytes: +2,147,483,647

Darstellung ganzer Zahlen in einer CPU:

   Zweier-Komplement

Ganzzahlige Datentypen:

Wollen wir den Wert MIT Vorzeichen:   Temperatur

Wollen wir den Wert OHNE Vorzeichen:  Häufigkeit

short:           -32,768 bis +32,767

unsigned short:  0 bis 65,535

==>  Mikrocomputer Programmierung
==>  Digitaltechnik


VARIABLEN // variable

Reserviert Speicher // wieviel: gem. Datentyp // hat für
uns in der Anwendung einen Namen (Bezeichner // identifier )

Bezeichner sollten "sprechend" sein.

    value = 123;

    Wertzuweisung // Assigment

Jede Anweisung und Deklaration ist mit
einem Semikolon abzuschließen.

Deklaration: Definiert einen Bezeichner incl. Typ

================================================================

Debugger:

Roter Kreis // Break-Point // F9

Grüner (voller) Pfeil: Go // Run // F5

Single Step: EINE ZEILE 

IN 2 Varianten: Steht in der Zeile ein Unterprogrammaufruf oder nicht.

Wenn Nein: Mit F10 // Single Step // Steo over wird die eine Zeile ausgeführt.

Wenn Ja:
   i)  Mit F10 // "Step over" wird die eine Zeile ausgeführt.
   ii) Mit F11 // "Step into" wird in das Unterprogramm verzweigt // gesprungen.


"Punkt vor Strich"

Exakter: Vorrang (Priorität) von Operatoren

================================================================

Ausführung eines Programms:

"Anweisung für Anweisung" - der Reihe nach - sequentiell

Fallunterscheidung

Bedingung:  Ist eine Bedingung erfüllt oder nicht ???

Hat eine Zahl einen Wert größer 5 oder nicht ???

Wahrheitswert: bool // true // false : Gibt es in C nicht.

BLOCK:

{
}

Achtung: if-Anweisungen mit EINER Anweisung

GEHT - ich kann / könnte die geschweifen Klammern dann weglassen.

EMPFEHLUNG:

Verwende Kontrollstrukturen (zB. if) IMMER mit geschweifen Klammern verwenden.

Logische Verknüpfung

Es ist a groesser 5 UND b kleiner 10     UND:  &&
Es ist a groesser 5 ODER b kleiner 10    ODER: ||
Es ist nicht a groesser 5                NOT:  !

// ========================================================================

Wiederholungs-Anweisungen:

while

SYNTAX:

while ( condition )
{
}

while-Anweisung: In 2 Varianten:

i)  while
ii) do-while

SYNTAX: do-while

do
{
}
while ( condition )

// ======================================================

Was ist in C eine Bedingung ????

Es gibt kein bool // true // false

Dennis Ritchie: Minimalistisch

Bedingung in C: Inhalt eines int-Werts

Was ist dann true ???
Was ist dann false ???

Definition:

false: Wert ist Null
true:  Wert ist Nicht Null

Operatoren:

ist-gleich:     ==

ist-ungleich:   !=

===============================================================

// Achtung / Vorsicht

Stolperfalle:

Es gibt in C ZWEI Divisionen:

i) ganzzahlige Division:

   7 / 3 = 2

ii ) Gleitpunkt Division:

   7 / 3 = 2.3333333

Wie spreche ich welche der beiden Divisionen an ?

==> Der Typ der Operanden entscheidet !!!

Wenn BEIDE Operanden vom Typ int: ganzzahlige Division

Wenn EINER oder BEIDE Operanden vom Typ float / double: Gleitpunkt Division

Nebenbemerkung:

float / double

Es gibt ZWEI Gleitpunkt Realisierungen in C:

float:   4 Byte

   schneller / weniger exakt

double:  8 Byte

   langsamer / mehr exakt

Im Detail: 4 Byte Div Befehl / 8 Byte Div Befehl.

===========================================================

2 Aufgaben:
==========

Teuflische Folge
Kontrollstrukturen if und while, arithmetische Operatoren (Division und Modulo-Operation ganzer Zahlen).

Zinsberechnung
Kontrollstruktur for oder while, arithmetische Operatoren.

Teuflische Folge: Folge von Zahlen

Startwert n;

int n = 7;

Nächster Wert:

n gerade:    n => n / 2
n ungerade:  n => 3 * n + 1

7, 22, 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 1: Ist ENDE erreicht.


eingabe mit scanf:

'scanf': This function or variable may be unsafe.
Consider using scanf_s instead.
To disable deprecation, use _CRT_SECURE_NO_WARNINGS.

'scanf_s'    // secure

===============================================

for: Sehr, sehr ähnlich mit while

Warum for , wenn es while gibt:

i) for ist "etwas" kompakter in der Schreibweise

ii) while ==> Bedingung

iii) for  ==> Wiederholung: mache etwas 100 Mal

SYNTAX:

for ( XXX ; YYY  ; ZZZ )
{
}

for ( int i = 0 ; i < 10  ; i++ )
{
    // Rumpf 
}

================================================================

"Unterprogramm"

Eine Zusammenfassung von Anweisungen mit einem Namen.

Mit diesem Namen kann man diese Folge von Anweisungen aufrufen.

C:

2 Arten von Unterprogrammen:

a) Unterprogramm
b) Funktion

a) Unterprogramm: Berechnet / Liefert KEIN Ergebnis zurück

SYNTAX:

void name_unterprogramm ( parameter )
{
    // body // Rumpf // Folge von Anweisungen
}

b) Funktion:

SYNTAX:

type name_function ( parameter )
{
    // body // Rumpf // Folge von Anweisungen

    return value;  // value muss vom Typ 'type'
}


// Lokale Variable

=================================================

Block: 

Was ist ein Block: Alles zwischen { und }

Wozu benötige ich einen Block?

Blöcke: VORSICHT.

Können Nebeneffekte haben !!!!!!!!!!!!!!!!!!!

=================================================


C-Programm:

3 Arten von Variablen // Lebensdauer:

a) Globale Variablen: Die gesamte Laufzeit des Programms.

b) Lokale Variablen: Nur innerhalb eines Unterprogramms (exakter: innerhalb eines Blocks)

c) Dynamische Variablen: Wenn ich sie benötige.

          ( malloc / free )


=================================================

Arrays // Feld

Was ist ein Array ???

Vereinbarung eines zusammenhängenden Bereichs von Speicher:

zusammenhängenden: Vorteil ==> schnell / effizient darauf zugreifen.

Beobachtung:

Ein Feld sollte VORBELEGT werden.

Wenn es nicht vorbelegt ist: Zufallswerte sind enthalten.

Ohhhhh, die sind alle gleich: Ist das zufällig ????????????????

Nein: Im Debug-Modus übernimmt der Debugger die Vorbelegung eines Arrays.

Es gibt für STACK und HEAP unterschiedlichen "Vorbelegungs"-Werte des Debuggers:

CCCCC
DDDDD

Frage:

Geht diese Anweisung:

    int zahlen[10] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
    // ...
    int last = zahlen[10];

Irgendwie Ja: Kein Error beim Übersetzen // Wird ausgeführt.

Warum ?????????????????????????????????

A) Das war die Philosophie / Entwurfsentscheidung von Dennis Ritchie:

   "A Programmer know what he does"

   Beobachtungen: C ist unsicher // unsecure
                  C überprüft keine Indices.

Warum ist das so: Historisch gewachsen.

Warum hat man das nicht geändert ????
  Weil viel zu viel geschriebener Code bereits vorhanden war.

Was ist lerne ich daraus:

Ich muss einfach höllisch aufpassen beim Programmieren.

JavaSript: Überprüft alles. C# auch. Java auch.

==========================================================

Beobachtung:

    // wie belegt man ein Feld typischerweise vor:  for-Schleife
    for (int i = 0; i < 10; i++)
    {
        zahlen[i] = 2 * i;
    }

    //  wie gibt man ein Feld aus for-Schleife
    for (int i = 0; i < 10; i++)
    {
        printf("%d: %d\n", i, zahlen[i]);
    }


Das sieht "aufwendig" aus.
 
C hat im Gegensatz zu MatLab KEINE Unterstützung / keine Bibliotheken
für Arrays.

Wir könnten solche Funktionen / Unterprogramme selbst schreiben.

=============================================================

Es gibt den ++ Operator in 2 Varianten:

Post-Inkrement  // danach
Pre-Inkrement   // davor

====================================================================